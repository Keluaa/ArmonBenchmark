
script:
 - entrées:
    - script file:
        - device: CPU, CUDA, ROCM
        - backend: cpp, julia, kokkos...
        - node: a100, mi100...
        - threads list
        - block size list
        - processes list
        - cyclic/block
        - ieee bits
        - cells list
        - tests list
        - +common armon params
        - nom de la mesure
        - temps max (défault: 7200 ou 3600 (2h ou 1h)
    - index de début des itérations hors inti et un autre dans inti (que en argument en cli)

 - sorties:
    - chaque fichier se trouve dans un sous dossier qui porte le nom de la mesure
    - fichiers de données: nb_cells, cells/sec, autres params qui varient...
        -> ordonnés dans des dossiers par device et par API
    - plots pour gnuplot
        -> à faire tourner depuis le dossier parent
    - plots en pdf
    - tous les fichiers de sortie ont 'device, API, nb threads, block size, cyclic/block, ieee' dans leur nom

 - inti:
    - si le script tourne sur la node login:
        - chargement des modules nécessaires (utiliser "module restore <nom>" pour garentir l'environement)
        - lancement du script une nouvelle fois (ou plusieurs) avec les options nécessaires:
            -p <node>
            -x
            -n <processes>
            -c <max threads>
            -E "-m block:block" ou "-m block:cyclic"
            -T <temps max>
    - si le script tourne sur inti:
        - on ignore les options jusqu'à l'index de début
        - on ignore 'processes list', 'cyclic/block', 'nodes', 'temps max'
        - on garde 'device' que si il est présent sur la node actuelle
    
 - design:
    - script hôte:
        - un itérateur sur les mesures à faire
        - un itérateur sur les combinaisons hors inti
    - script inti:
        - un itérateur sur les combinaisons dans inti
        - (recompilation si nécessaire)
        - un itérateur sur les paramètres Armon
